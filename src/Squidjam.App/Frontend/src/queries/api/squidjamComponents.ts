/**
 * Generated by @openapi-codegen
 *
 * @version 1.0
 */
import * as reactQuery from '@tanstack/react-query';
import { useSquidjamContext, SquidjamContext } from './squidjamContext';
import type * as Fetcher from './squidjamFetcher';
import { squidjamFetch } from './squidjamFetcher';
import type * as Schemas from './squidjamSchemas';

export type ListGamesError = Fetcher.ErrorWrapper<undefined>;

export type ListGamesResponse = {
    [key: string]: Schemas.Game;
};

export type ListGamesVariables = SquidjamContext['fetcherOptions'];

export const fetchListGames = (variables: ListGamesVariables, signal?: AbortSignal) =>
    squidjamFetch<ListGamesResponse, ListGamesError, undefined, {}, {}, {}>({
        url: '/api/games',
        method: 'get',
        ...variables,
        signal,
    });

export const useListGames = <TData = ListGamesResponse>(
    variables: ListGamesVariables,
    options?: Omit<
        reactQuery.UseQueryOptions<ListGamesResponse, ListGamesError, TData>,
        'queryKey' | 'queryFn' | 'initialData'
    >,
) => {
    const { fetcherOptions, queryOptions, queryKeyFn } = useSquidjamContext(options);
    return reactQuery.useQuery<ListGamesResponse, ListGamesError, TData>({
        queryKey: queryKeyFn({ path: '/api/games', operationId: 'listGames', variables }),
        queryFn: ({ signal }) => fetchListGames({ ...fetcherOptions, ...variables }, signal),
        ...options,
        ...queryOptions,
    });
};

export type QueryOperation = {
    path: '/api/games';
    operationId: 'listGames';
    variables: ListGamesVariables;
};
